#!/bin/sh

RED_COLOR="\033[1;31m"
GREEN_COLOR="\033[1;32m"
YELLOW_COLOR="\033[1;33m"
BOLD_TEXT="\033[1m"
NO_STYLE="\033[0m"
ANTISCAN_DIR="/opt/etc/antiscan"
CONFIG_FILE="$ANTISCAN_DIR/ascn.conf"
CONFIG_FILE_TEMP="/tmp/ascn.conf.tmp"
ASCN_TEMP_FILE="/tmp/ascn.run"
ASCN_LOCK_FILE="/tmp/ascn.lock"
ASCN_GEO_LOCK_FILE="/tmp/ascn_geo.lock"
ASCN_GEO_LOAD_ERROR_FILE="/tmp/ascn_geo_load_error"
PATH=/opt/bin:/opt/sbin:/sbin:/usr/sbin:/bin:/usr/bin

read_config() {
  source "$CONFIG_FILE"
  check_config
  if [ -f "$CONFIG_FILE_TEMP" ]; then
    source "$CONFIG_FILE_TEMP"
  fi
}

check_config() {
  [ -z "$RULES_MASK" ] && RULES_MASK="255.255.255.255"

  [ -z "$SAVE_IPSETS" ] && SAVE_IPSETS=0
  [ -z "$CUSTOM_LISTS_BLOCK_MODE" ] && CUSTOM_LISTS_BLOCK_MODE=0
  [ -z "$USE_CUSTOM_EXCLUDE_LIST" ] && USE_CUSTOM_EXCLUDE_LIST=0
  [ -z "$GEOBLOCK_MODE" ] && GEOBLOCK_MODE=0
  [ -z "$READ_NDM_LOCKOUT_IPSETS" ] && READ_NDM_LOCKOUT_IPSETS=0
  [ -z "$LOCKOUT_IPSET_BANTIME" ] && LOCKOUT_IPSET_BANTIME=0

  if [ -z "$IPSETS_DIRECTORY" ] && [[ "$SAVE_IPSETS" == "1" || "$GEOBLOCK_MODE" != "0" ]]; then
    print_message "error" "В ascn.conf не указан путь для сохранения ipset!"
    exit 3
  else
    if [ "$GEOBLOCK_MODE" != 0 ] && [ -z "$GEOBLOCK_COUNTRIES" ]; then
      print_message "error" "В ascn.conf не указаны страны для геоблокировки!"
      exit 3
    else
      count=$(
        set -- $GEOBLOCK_COUNTRIES
        echo $#
      )
      if [ "$count" -gt 8 ]; then
        print_message "error" "Количество указанных стран для геоблокировки превышает 8"
        exit 4
      fi
    fi
  fi
}

read_config

start() {
  if ascn_is_running; then
    print_message "error" "Antiscan уже работает"
    exit 1
  else
    if config_is_reloading; then
      print_message "error" "Запуск Antiscan невозможен, пока идёт обновление конфигурации"
      exit 2
    fi

    if geo_is_loading; then
      print_message "error" "Запуск Antiscan невозможен, пока идёт обновление списков подсетей геоблокировки"
      exit 2
    fi

    load_kernel_modules
    write_temp_config
    create_ipsets
    add_rules
    update_cron
    create_status_file
    print_message "notice" "Antiscan запущен"
  fi
}

stop() {
  if ! ascn_is_running; then
    print_message "error" "Antiscan не запущен"
  else

    if config_is_reloading; then
      print_message "error" "Остановка Antiscan невозможна, пока идёт обновление конфигурации"
      exit 2
    fi

    if geo_is_loading; then
      print_message "error" "Остановка Antiscan невозможна, пока идёт обновление списков подсетей геоблокировки"
      exit 2
    fi

    remove_rules
    destroy_ipsets
    destroy_temp_config
    remove_status_file
    print_message "notice" "Antiscan остановлен"
  fi
}

load_kernel_modules() {
  if [ -z "$(lsmod 2>/dev/null | grep "xt_recent ")" ]; then
    xtrecent_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_recent.ko*")
    if [ -n "$xtrecent_mod_path" ]; then
      insmod "$xtrecent_mod_path" >/dev/null 2>&1
      print_message "notice" "xt_recent.ko загружен"
    else
      print_message "error" "Не удалось найти модуль ядра xt_recent.ko"
      exit 1
    fi
  fi

  if [ -z "$(lsmod 2>/dev/null | grep "xt_multiport ")" ]; then
    multiport_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_multiport.ko*")
    if [ -n "$multiport_mod_path" ]; then
      insmod "$multiport_mod_path" >/dev/null 2>&1
      print_message "notice" "xt_multiport.ko загружен"
    else
      print_message "error" "Не удалось найти модуль ядра xt_multiport.ko"
      exit 1
    fi
  fi
}

print_message() {
  msg_type="$1"
  msg_text="$2"
  logger -p "${msg_type}" -t "Antiscan" "${msg_text}"
  case $msg_type in
  error)
    echo "${msg_text}" >&2
    ;;
  notice)
    [ -z "$3" ] && echo "${msg_text}"
    ;;
  warning)
    [ "$3" == "1" ] && echo "${msg_text}" >&2
    ;;
  esac
}

write_temp_config() {
  echo "ISP_INTERFACES=\"$ISP_INTERFACES\"" >"$CONFIG_FILE_TEMP"
  echo "PORTS=\"$PORTS\"" >>"$CONFIG_FILE_TEMP"
  echo "RECENT_CONNECTIONS_TIME=$RECENT_CONNECTIONS_TIME" >>"$CONFIG_FILE_TEMP"
  echo "RECENT_CONNECTIONS_HITCOUNT=$RECENT_CONNECTIONS_HITCOUNT" >>"$CONFIG_FILE_TEMP"
  echo "RECENT_CONNECTIONS_LIMIT=$RECENT_CONNECTIONS_LIMIT" >>"$CONFIG_FILE_TEMP"
  echo "RECENT_CONNECTIONS_BANTIME=$RECENT_CONNECTIONS_BANTIME" >>"$CONFIG_FILE_TEMP"
  echo "DIFFERENT_IP_CANDIDATES_STORAGETIME=$DIFFERENT_IP_CANDIDATES_STORAGETIME" >>"$CONFIG_FILE_TEMP"
  echo "DIFFERENT_IP_THRESHOLD=$DIFFERENT_IP_THRESHOLD" >>"$CONFIG_FILE_TEMP"
  echo "SUBNETS_BANTIME=$SUBNETS_BANTIME" >>"$CONFIG_FILE_TEMP"
  echo "RULES_MASK=\"$RULES_MASK\"" >>"$CONFIG_FILE_TEMP"
  echo "IPSETS_DIRECTORY=\"$IPSETS_DIRECTORY\"" >>"$CONFIG_FILE_TEMP"
  echo "SAVE_IPSETS=$SAVE_IPSETS" >>"$CONFIG_FILE_TEMP"
  echo "USE_CUSTOM_EXCLUDE_LIST=$USE_CUSTOM_EXCLUDE_LIST" >>"$CONFIG_FILE_TEMP"
  echo "CUSTOM_LISTS_BLOCK_MODE=\"$CUSTOM_LISTS_BLOCK_MODE\"" >>"$CONFIG_FILE_TEMP"
  echo "GEOBLOCK_MODE=\"$GEOBLOCK_MODE\"" >>"$CONFIG_FILE_TEMP"
  echo "GEOBLOCK_COUNTRIES=\"$GEOBLOCK_COUNTRIES\"" >>"$CONFIG_FILE_TEMP"
  echo "READ_NDM_LOCKOUT_IPSETS=$READ_NDM_LOCKOUT_IPSETS" >>"$CONFIG_FILE_TEMP"
  echo "LOCKOUT_IPSET_BANTIME=$LOCKOUT_IPSET_BANTIME" >>"$CONFIG_FILE_TEMP"
}

destroy_temp_config() {
  IPSETS_DIRECTORY=""
  SAVE_IPSETS=0
  RULES_MASK="255.255.255.255"
  CUSTOM_LISTS_BLOCK_MODE=0
  USE_CUSTOM_EXCLUDE_LIST=0
  GEOBLOCK_MODE=0
  GEOBLOCK_COUNTRIES=""
  READ_NDM_LOCKOUT_IPSETS=0
  LOCKOUT_IPSET_BANTIME=0
  rm -f "$CONFIG_FILE_TEMP"
  source "$CONFIG_FILE"
}

_iptables() {
  ACTION=$1
  shift 1
  RULE="$@"

  iptables -w -C $RULE 2>/dev/null
  exists=$?

  if echo "$RULE" | grep -q 'ANTISCAN'; then
    iptables -L ANTISCAN -w -t filter -n >/dev/null 2>&1
    chain_exists=$?
  else
    chain_exists=0
  fi

  if [ "$ACTION" == "-I" ] || [ "$ACTION" == "-A" ]; then
    if [ $exists -ne 0 ] && [ $chain_exists -eq 0 ]; then
      iptables $ACTION $RULE
    fi
  elif [ "$ACTION" == "-D" ] && [ $exists -eq 0 ] && [ $chain_exists -eq 0 ]; then
    iptables $ACTION $RULE
  fi
}

add_rules() {
  if ! iptables -L ANTISCAN -w -t filter -n >/dev/null 2>&1; then
    iptables -N ANTISCAN -w -t filter
    if [ -n "$(ipset -q list ascn_custom_exclude)" ]; then
      _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m set --match-set ascn_custom_exclude src -j RETURN
    fi
    if [ -n "$(ipset -q list ascn_custom_blacklist)" ]; then
      _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m set --match-set ascn_custom_blacklist src -j DROP
    fi
    if [ -n "$(ipset -q list ascn_custom_whitelist)" ]; then
      _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m set ! --match-set ascn_custom_whitelist src -j DROP
    fi
    if [ -n "$(ipset -q list ascn_geo_blacklist)" ]; then
      _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m set --match-set ascn_geo_blacklist src -j DROP
    fi
    if [ -n "$(ipset -q list ascn_geo_whitelist)" ]; then
      _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m set ! --match-set ascn_geo_whitelist src -j DROP
    fi
    if [ -n "$(ipset -q list ascn_ndm_lockout)" ]; then
      _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m set --match-set ascn_ndm_lockout src -j DROP
    fi
    _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m set --match-set ascn_subnets src -j DROP
    _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -j SET --add-set ascn_candidates src
    _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m set --match-set ascn_ips src -j DROP
    _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m connlimit --connlimit-above $RECENT_CONNECTIONS_LIMIT --connlimit-mask $RULES_MASK -j SET --add-set ascn_ips src
    _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m conntrack --ctstate NEW -m recent --update --seconds $RECENT_CONNECTIONS_TIME --hitcount $RECENT_CONNECTIONS_HITCOUNT --name scanners --mask $RULES_MASK -j SET --add-set ascn_ips src
    _iptables -A ANTISCAN -w -t filter -p tcp -m multiport --dports $PORTS -m conntrack --ctstate NEW -m recent --set --name scanners --mask $RULES_MASK
    _iptables -A ANTISCAN -w -t filter -j RETURN
  fi

  if iptables -L ANTISCAN -w -t filter -n >/dev/null 2>&1; then
    for CHAIN in "INPUT" "FORWARD"; do
      for INTERFACE in $ISP_INTERFACES; do
        _iptables -I $CHAIN -w -t filter -i $INTERFACE -p tcp -m multiport --dports $PORTS -j ANTISCAN
      done
    done
  fi
}

remove_rules() {
  if iptables -L ANTISCAN -w -t filter -n >/dev/null 2>&1; then
    for CHAIN in "INPUT" "FORWARD"; do
      for INTERFACE in $ISP_INTERFACES; do
        _iptables -D $CHAIN -w -t filter -i $INTERFACE -p tcp -m multiport --dports $PORTS -j ANTISCAN
      done
    done
    iptables -F ANTISCAN -w -t filter
    iptables -X ANTISCAN -w -t filter
  fi
}

create_ipsets() {
  if [ -z "$(ipset -q list ascn_candidates)" ]; then
    add_ipset "ascn_candidates" "hash:ip" $DIFFERENT_IP_CANDIDATES_STORAGETIME
  fi

  if [ -z "$(ipset -q list ascn_ips)" ]; then
    add_ipset "ascn_ips" "hash:ip" $RECENT_CONNECTIONS_BANTIME
  fi

  if [ -z "$(ipset -q list ascn_subnets)" ]; then
    add_ipset "ascn_subnets" "hash:net" $SUBNETS_BANTIME
  fi

  if [ "$READ_NDM_LOCKOUT_IPSETS" -eq 1 ] && [ -z "$(ipset -q list ascn_ndm_lockout)" ]; then
    add_ipset "ascn_ndm_lockout" "hash:ip" $LOCKOUT_IPSET_BANTIME
  fi

  if [ "$CUSTOM_LISTS_BLOCK_MODE" == "blacklist" ] || [ "$CUSTOM_LISTS_BLOCK_MODE" == "whitelist" ]; then
    ipset_custom_name="ascn_custom_${CUSTOM_LISTS_BLOCK_MODE}"
    if [ -z "$(ipset -q list $ipset_custom_name)" ]; then
      load_custom_ipset "$ipset_custom_name"
    fi
  fi

  if [ "$USE_CUSTOM_EXCLUDE_LIST" -eq 1 ] && [ -z "$(ipset -q list ascn_custom_exclude)" ]; then
    load_custom_ipset "ascn_custom_exclude"
  fi

  if [ "$GEOBLOCK_MODE" == "blacklist" ] || [ "$GEOBLOCK_MODE" == "whitelist" ]; then
    ipset_geo_name="ascn_geo_${GEOBLOCK_MODE}"
    if [ -z "$(ipset -q list $ipset_geo_name)" ]; then
      load_geo_ipset "$GEOBLOCK_MODE" 0
    fi
  fi
}

add_ipset() {
  ipset_name="$1"
  ipset_type="$2"
  ipset_timeout="$3"
  ipset_timeout_string=""
  ipset_file="$IPSETS_DIRECTORY/ipset_$ipset_name.txt"
  should_add_ipset=1

  case $ipset_name in
  "ascn_candidates")
    ipset_timeout_string=$([ "$DIFFERENT_IP_CANDIDATES_STORAGETIME" -ne 0 ] && echo "timeout "$DIFFERENT_IP_CANDIDATES_STORAGETIME"")
    ;;
  "ascn_ips")
    ipset_timeout_string=$([ "$RECENT_CONNECTIONS_BANTIME" -ne 0 ] && echo "timeout "$RECENT_CONNECTIONS_BANTIME"")
    ;;
  "ascn_subnets")
    ipset_timeout_string=$([ "$SUBNETS_BANTIME" -ne 0 ] && echo "timeout "$SUBNETS_BANTIME"")
    ;;
  "ascn_ndm_lockout")
    ipset_timeout_string=$([ "$LOCKOUT_IPSET_BANTIME" -ne 0 ] && echo "timeout "$LOCKOUT_IPSET_BANTIME"")
    ;;
  esac

  if [ "$SAVE_IPSETS" -eq 1 ] && [ -s "$ipset_file" ]; then
    ipset_old_timeout=$(grep -oP '^create.*timeout\s+\K\d+$' "$ipset_file")
    if [ -z "$ipset_old_timeout" ]; then
      ipset_old_timeout=0
    fi
    update_ipset_timeout "$ipset_name" "$ipset_old_timeout" "$ipset_timeout" "$ipset_file" 0
    if restore_ipset_from_file "$ipset_name" "$ipset_file"; then
      should_add_ipset=0
    fi
  fi

  if [ "$should_add_ipset" -eq 1 ]; then
    ipset create $ipset_name $ipset_type $ipset_timeout_string
  fi
}

destroy_ipsets() {
  local ipsets_list="ascn_candidates ascn_ips ascn_subnets ascn_custom_exclude ascn_custom_blacklist ascn_custom_whitelist ascn_geo_blacklist ascn_geo_whitelist ascn_ndm_lockout"
  for set in $ipsets_list; do
    if [ -n "$(ipset -q list $set)" ]; then
      ipset destroy $set
    fi
  done
}

restore_ipset_from_file() {
  if ! ipset restore <"$2"; then
    print_message "error" "Не удалось импортировать ipset $1!"
    return 1
  else
    return 0
  fi
}

load_custom_ipset() {
  custom_ipset_tempfile="/tmp/ipset_custom.txt"
  custom_ipset_filename="$ANTISCAN_DIR/$1.txt"
  if [ -f "$custom_ipset_filename" ]; then
    custom_file_size="$(ls -l "$custom_ipset_filename" | awk '{print $5}')"
    if [ "$custom_file_size" -gt 4 ]; then
      echo "create $1 hash:net family inet hashsize 1024 maxelem 65536" >"$custom_ipset_tempfile"
      sed "s/^/add $1 /" "$custom_ipset_filename" >>"$custom_ipset_tempfile"
      if ! ipset -! restore <"$custom_ipset_tempfile"; then
        print_message "error" "Не удалось импортировать список $1!"
      fi
      rm "$custom_ipset_tempfile"
    else
      print_message "error" "В файле $1 отсутствуют IP-адреса."
      print_message "error" "Добавьте их и перезапустите Antiscan."
    fi
  else
    echo >"$custom_ipset_filename"
    print_message "warning" "Файл $1 отсутствовал и был создан автоматически." 1
    print_message "error" "Добавьте в него IP-адреса и перезапустите Antiscan."
  fi
}

load_geo_ipset() {
  geo_ipset_type="$1"
  is_geo_reloading="$2"
  is_trying_load_geo="$3"
  geo_directory="$IPSETS_DIRECTORY/geo"
  temp_geo_ipset_path="/tmp/temp_geo_ipset.txt"
  unavailable_countries=""
  load_country_failed=0

  if geo_is_loading; then
    print_message "error" "Обновление списков подсетей геоблокировки уже запущено"
  else
    create_geo_lock_file

    if [ ! -d "$geo_directory" ]; then
      unavailable_countries="${GEOBLOCK_COUNTRIES}"
      mkdir "$geo_directory"
    else
      for country in $GEOBLOCK_COUNTRIES; do
        exclude_countries="${exclude_countries}! -name ${country}.txt "
        subnets_file="$geo_directory/$country.txt"
        if [ ! -s "$subnets_file" ]; then
          unavailable_countries="${unavailable_countries} ${country}"
        fi
      done
      find "$geo_directory" -maxdepth 1 $exclude_countries -type f -delete
    fi

    [ "$is_geo_reloading" == "1" ] && unavailable_countries="${GEOBLOCK_COUNTRIES}"

    if [ -n "$unavailable_countries" ]; then
      curl_temp_file_path="/tmp/curl_geo_response.txt"

      for country in $unavailable_countries; do
        geo_subnets_file="$geo_directory/$country.txt"
        [ -f "$geo_subnets_file" ] && rm "$geo_subnets_file"
        printf "Загрузка списка подсетей для страны ${BOLD_TEXT}${country}${NO_STYLE}... "
        log_message="Загрузка списка подсетей для страны ${country}"
        if curl --max-time 30 -fsS "https://stat.ripe.net/data/country-resource-list/data.json?resource=${country}&v4_format=prefix" >"$curl_temp_file_path"; then
          jq -r '.data.resources.ipv4[]' "$curl_temp_file_path" >"$geo_subnets_file"
          exit_code=$?
          if [ "$exit_code" -ne 0 ]; then
            log_message="${log_message} завершилась неудачно"
            load_result=1
            load_country_failed=1
            printf "${RED_COLOR}неудачно${NO_STYLE}\n"
          else
            log_message="${log_message} выполнена успешно"
            load_result=0
            printf "${GREEN_COLOR}успешно${NO_STYLE}\n"
          fi
        else
          log_message="${log_message} завершилась неудачно"
          load_result=1
          load_country_failed=1
          printf "${RED_COLOR}неудачно${NO_STYLE}\n"
        fi

        if [ "$load_result" -eq 0 ]; then
          print_message "notice" "${log_message}" 1
        else
          print_message "warning" "${log_message}" 0
        fi
      done
      [ -f "$curl_temp_file_path" ] && rm "$curl_temp_file_path"
    fi

    [ "$load_country_failed" -eq 1 ] && create_geo_error_task || remove_geo_error_task

    if [ "$is_trying_load_geo" == "1" ] && [ "$load_country_failed" -eq 1 ]; then
      :
    else
      if [ -d "$geo_directory" ]; then
        if [ "$is_geo_reloading" != "1" ] && [ "$is_trying_load_geo" != "1" ]; then
          echo "create ascn_geo_$geo_ipset_type hash:net family inet hashsize 1024 maxelem 1000000" >"$temp_geo_ipset_path"
        fi
        for country in $GEOBLOCK_COUNTRIES; do
          subnets_file="$geo_directory/$country.txt"
          if [ -s "$subnets_file" ]; then
            sed "s/^/add ascn_geo_$geo_ipset_type /" "$subnets_file" >>"$temp_geo_ipset_path"
          fi
        done
      fi

      geo_subnets_count="$(grep -c '^' "$temp_geo_ipset_path")"
      if [ "$geo_subnets_count" -gt 1 ]; then
        if [ "$is_geo_reloading" == "1" ] || [ "$is_trying_load_geo" == "1" ]; then
          ipset flush ascn_geo_$geo_ipset_type
        fi

        if ! ipset -! restore <"$temp_geo_ipset_path"; then
          print_message "error" "Не удалось импортировать список ascn_geo_$geo_ipset_type!"
        fi
      else
        print_message "error" "Загруженный список подсетей пуст"
      fi
      rm "$temp_geo_ipset_path"
    fi

    remove_geo_lock_file
  fi
}

create_geo_error_task() {
  if [ ! -f "$ASCN_GEO_LOAD_ERROR_FILE" ]; then
    echo "1" >"$ASCN_GEO_LOAD_ERROR_FILE"
    ascn_cron_file="$ANTISCAN_DIR/ascn_crontab.conf"
    if [ -s "$ascn_cron_file" ]; then
      if ! grep -q 'S99ascn retry_load_geo' "$ascn_cron_file"; then
        print_message "notice" "Создаем задачу для повторного обновления списка подсетей..."
        sed -n -i '\:S99ascn:p; $a0 */1 * * * /opt/etc/init.d/S99ascn retry_load_geo &' "$ascn_cron_file"
        update_cron
      fi
    else
      print_message "error" "Не удалось создать задачу для повторного обновления списка подсетей"
    fi
  fi
}

remove_geo_error_task() {
  if [ -f "$ASCN_GEO_LOAD_ERROR_FILE" ]; then
    rm "$ASCN_GEO_LOAD_ERROR_FILE"
  fi
  ascn_cron_file="$ANTISCAN_DIR/ascn_crontab.conf"
  if [ -s "$ascn_cron_file" ]; then
    if grep -q 'S99ascn retry_load_geo' "$ascn_cron_file"; then
      print_message "notice" "Удаляем задачу повторного обновления списка подсетей..."
      sed -i '/S99ascn retry_load_geo/d' "$ascn_cron_file"
      update_cron
    fi
  fi
}

read_ip_candidates() {
  if ascn_is_running; then
    if config_is_reloading; then
      print_message "error" "Работа с адресами-кандидатами невозможна, пока идёт обновление конфигурации Antiscan"
      exit 2
    else
      if [ -n "$(ipset -q list ascn_ips)" ] && [ -n "$(ipset -q list ascn_candidates)" ] && [ -n "$(ipset -q list ascn_subnets)" ]; then
        ipset_candidates="$(ipset save ascn_candidates | tail -n +2)"
        ipset_ips="$(ipset save ascn_ips | tail -n +2)"
        ipset_combined_sorted="$(echo "${ipset_candidates}${ipset_ips}" | sort)"

        if [ -n "$ipset_combined_sorted" ]; then
          [ -f "$ASCN_REGEXP_FILE" ] && rm "$ASCN_REGEXP_FILE"

          sorted_candidates="$(echo "$ipset_combined_sorted" | grep -oE '([0-9]{1,3}[\.]){3}' | uniq -c)"
          regexp_variable=""
          ipset_variable=""

          while read count subnet_number; do
            if [ "$count" -ge "$DIFFERENT_IP_THRESHOLD" ]; then
              regexp_variable="${regexp_variable}${subnet_number}[0-9]{1,3}|"
              ipset_variable="${ipset_variable}add ascn_subnets ${subnet_number}0/24\n"
            fi
          done <<EOF
$sorted_candidates
EOF

          echo -e "$ipset_variable" | ipset -! restore

          if [ -n "$regexp_variable" ]; then
            ipset_candidates_sorted="$(echo "$ipset_candidates" | sort)"
            ipset_ips_sorted="$(echo "$ipset_ips" | sort)"
            ips_regexp="$(echo "$regexp_variable" | sed 's/.$//')"

            if [ -n "$ipset_candidates_sorted" ]; then
              ipset flush ascn_candidates
              echo "$ipset_candidates_sorted" | grep -vE "(${ips_regexp})" | ipset -! restore
            fi

            if [ -n "$ipset_ips_sorted" ]; then
              ipset flush ascn_ips
              echo "$ipset_ips_sorted" | grep -vE "(${ips_regexp})" | ipset -! restore
            fi
          fi
        fi
      fi
    fi
  else
    exit 1
  fi
}

read_ndm_ipsets() {
  if ascn_is_running; then
    if config_is_reloading; then
      print_message "error" "Работа с системными списками адресов невозможна, пока идёт обновление конфигурации Antiscan"
      exit 2
    else
      if [ -n "$(ipset -q list ascn_ndm_lockout)" ]; then
        ndm_sets="$(ipset list -n | grep -E '^_NDM_BFD_.+4$')"
        for ndm_set in $ndm_sets; do
          ndm_set_data="$(ipset save $ndm_set -q | tail -n +2 | sed "/127.0.0.1$/d; s/$ndm_set/ascn_ndm_lockout/")"
          if [ -n "$ndm_set_data" ]; then
            [ -z "$ndm_set_ips" ] && ndm_set_ips="${ndm_set_data}" || ndm_set_ips="${ndm_set_ips}\n${ndm_set_data}"
          fi
        done
        if [ -n "$ndm_set_ips" ]; then
          echo -e "$ndm_set_ips" | ipset -! restore
        fi
      fi
    fi
  else
    exit 1
  fi
}

create_status_file() {
  echo "1" >"$ASCN_TEMP_FILE"
}

remove_status_file() {
  if ascn_is_running; then
    rm "$ASCN_TEMP_FILE"
  fi
}

create_lock_file() {
  echo "1" >"$ASCN_LOCK_FILE"
}

remove_lock_file() {
  if config_is_reloading; then
    rm "$ASCN_LOCK_FILE"
  fi
}

ascn_is_running() {
  if [ -f "$ASCN_TEMP_FILE" ]; then
    return 0
  else
    return 1
  fi
}

config_is_reloading() {
  if [ -f "$ASCN_LOCK_FILE" ]; then
    return 0
  else
    return 1
  fi
}

geo_is_loading() {
  if [ -f "$ASCN_GEO_LOCK_FILE" ]; then
    return 0
  else
    return 1
  fi
}

create_geo_lock_file() {
  echo "1" >"$ASCN_GEO_LOCK_FILE"
}

remove_geo_lock_file() {
  if geo_is_loading; then
    rm "$ASCN_GEO_LOCK_FILE"
  fi
}

get_status() {
  echo -n "Статус Antiscan:"
  if ascn_is_running; then
    if config_is_reloading; then
      printf "\t${YELLOW_COLOR}обновление конфигурации${NO_STYLE}\n"
    elif geo_is_loading; then
      printf "\t${YELLOW_COLOR}обновление списков подсетей геоблокировки${NO_STYLE}\n"
    else
      banned_ip_count="$(ipset list ascn_ips | tail -n +8 | grep -c '^')"
      banned_subnets_count="$(ipset list ascn_subnets | tail -n +8 | grep -c '^')"
      printf "\t${GREEN_COLOR}работает${NO_STYLE}\n"
      printf "Заблокировано IP:\t${BOLD_TEXT}$banned_ip_count${NO_STYLE}\n"
      printf "Заблокировано подсетей:\t${BOLD_TEXT}$banned_subnets_count${NO_STYLE}\n"

      if [ "$READ_NDM_LOCKOUT_IPSETS" -eq 1 ]; then
        banned_ip_ndm_count="$(ipset list ascn_ndm_lockout | tail -n +8 | grep -c '^')"
        printf "Заблокировано NDMS:\t${BOLD_TEXT}$banned_ip_ndm_count${NO_STYLE}\n"
      else
        printf "Чтение списков NDMS:\t${RED_COLOR}отключено${NO_STYLE}\n"
      fi

      if [ "$USE_CUSTOM_EXCLUDE_LIST" -eq 1 ] || [ "$CUSTOM_LISTS_BLOCK_MODE" == "blacklist" ] || [ "$CUSTOM_LISTS_BLOCK_MODE" == "whitelist" ]; then
        if [ "$USE_CUSTOM_EXCLUDE_LIST" -eq 1 ]; then
          excluded_count="$(ipset -q list ascn_custom_exclude | tail -n +8 | grep -c '^')"
          if [ "$excluded_count" -gt 0 ]; then
            printf "Список исключений:\t${BOLD_TEXT}$(get_ipset_member_text "$excluded_count")${NO_STYLE}\n"
          else
            printf "Список исключений:\t${RED_COLOR}не активен${NO_STYLE}\n"
          fi
        fi

        case "$CUSTOM_LISTS_BLOCK_MODE" in
        "blacklist" | "whitelist")
          custom_set_name="ascn_custom_${CUSTOM_LISTS_BLOCK_MODE}"
          [ "$CUSTOM_LISTS_BLOCK_MODE" == "blacklist" ] && custom_set_type="Черный список" || custom_set_type="Белый список"
          custom_ip_count="$(ipset -q list $custom_set_name | tail -n +8 | grep -c '^')"
          if [ "$custom_ip_count" -gt 0 ]; then
            printf "${custom_set_type}:\t\t${BOLD_TEXT}$(get_ipset_member_text "$custom_ip_count")${NO_STYLE}\n"
          else
            printf "${custom_set_type}:\t\t${RED_COLOR}не активен${NO_STYLE}\n"
          fi
          ;;
        esac
      else
        printf "Пользовательские списки ${RED_COLOR}не активны${NO_STYLE}\n"
      fi

      printf "Геоблокировка:\t\t"
      case "$GEOBLOCK_MODE" in
      "blacklist" | "whitelist")
        geoset_name="ascn_geo_${GEOBLOCK_MODE}"
        [ "$GEOBLOCK_MODE" == "blacklist" ] && geoset_type="черный список" || geoset_type="белый список"

        geo_directory="$IPSETS_DIRECTORY/geo"
        available_countries_list=""
        if [ ! -d "$geo_directory" ]; then
          countries_list="${RED_COLOR}${GEOBLOCK_COUNTRIES}${NO_STYLE}"
        else
          for country in $GEOBLOCK_COUNTRIES; do
            subnets_file="$geo_directory/$country.txt"
            if [ ! -s "$subnets_file" ]; then
              [ -z "$countries_list" ] && countries_list="${RED_COLOR}${country}${NO_STYLE}" || countries_list="${countries_list} ${RED_COLOR}${country}${NO_STYLE}"
            else
              [ -z "$available_countries_list" ] && available_countries_list="${country}" || available_countries_list="${available_countries_list} ${country}"
              [ -z "$countries_list" ] && countries_list="${BOLD_TEXT}${country}${NO_STYLE}" || countries_list="${countries_list} ${BOLD_TEXT}${country}${NO_STYLE}"
            fi
          done
        fi

        if [ -n "$(ipset -q -n list $geoset_name)" ] && [ -n "$available_countries_list" ]; then
          printf "${GREEN_COLOR}$geoset_type${NO_STYLE}\n"
        else
          printf "${RED_COLOR}не работает${NO_STYLE}\n"
        fi
        printf "Страны:\t\t\t${countries_list}\n"
        ;;
      *)
        printf "${RED_COLOR}отключена${NO_STYLE}\n"
        ;;
      esac
    fi
  else
    printf "\t${RED_COLOR}не запущен${NO_STYLE}\n"
  fi
}

get_ipset_member_text() {
  record="записей"
  case $1 in
  *1?) true ;;
  *[2-4]) record="записи" ;;
  *1) record="запись" ;;
  esac
  echo "$1 $record"
}

show_ipsets() {
  case "$1" in
  ips | subnets | ndm_lockout)
    if ascn_is_running; then
      if config_is_reloading; then
        print_message "error" "Просмотр данных недоступен во время обновления конфигурации Antiscan"
      else
        text="IP"
        text_1="IP"
        if [ "$1" == "subnets" ]; then
          text="подсети"
          text_1="подсетей"
        fi
        ipset_data="$(ipset list ascn_$1 -s | tail -n +8)"
        [ -z "$ipset_data" ] && banned_count=0 || banned_count="$(echo "$ipset_data" | grep -c '^')"
        if [ "$banned_count" -eq 0 ]; then
          echo "Заблокированные ${text} отсутствуют"
        else
          echo "Заблокированные ${text}:"
          echo "$ipset_data"
          printf "Заблокировано ${text_1}: ${BOLD_TEXT}${banned_count}${NO_STYLE}\n"
        fi
      fi
    else
      print_message "error" "Antiscan не запущен"
    fi
    ;;
  *)
    echo "Использование: $0 list {ips|subnets|ndm_lockout}"
    ;;
  esac
}

update_iptables() {
  if ! ascn_is_running; then
    exit 1
  else
    wait_timeout=15
    log_message="Идет обновление конфигурации Antiscan, пробуем восстановить правила за 15 секунд... "
    while config_is_reloading && [ "$wait_timeout" -gt 0 ]; do
      if [ $wait_timeout -eq 15 ]; then echo -n "$log_message" >&2; fi
      wait_timeout=$((wait_timeout - 1))
      sleep 1
    done
    if config_is_reloading; then
      log_message="${log_message} неудачно"
      print_message "warning" "${log_message}" 1
      exit 2
    else
      if [ $wait_timeout -ne 15 ]; then
        log_message="${log_message} успешно"
        print_message "warning" "${log_message}" 1
      fi
      add_rules
    fi
  fi
}

export_ipsets() {
  if [ "$SAVE_IPSETS" -eq 1 ]; then
    if ascn_is_running; then
      if config_is_reloading; then
        print_message "error" "Экспорт ipset в файл недоступен во время обновления конфигурации Antiscan"
        return 2
      else
        local ipsets_list="ascn_candidates ascn_ips ascn_subnets ascn_ndm_lockout"
        for set_name in $ipsets_list; do
          ipset_filename="$IPSETS_DIRECTORY/ipset_$set_name.txt"
          banned_count="$(ipset list $set_name | tail -n +8 | grep -c '^')"
          if [ "$banned_count" -ne 0 ]; then
            if ! ipset save "$set_name" >"$ipset_filename"; then
              print_message "error" "Не удалось экспортировать ipset $set_name!"
            fi
          else
            if [ -f "$ipset_filename" ]; then
              rm "$ipset_filename"
            fi
          fi
        done
      fi
    else
      return 1
    fi
  fi
}

update_ipset_timeout() {
  set_name="$1"
  old_timeout="$2"
  new_timeout="$3"
  ipset_file="$4"
  is_reloading="$5"

  if [ "$old_timeout" -ne "$new_timeout" ]; then

    if [ "$is_reloading" -eq 1 ]; then
      ipset_file="/tmp/${set_name}.txt"
      ipset save "$set_name" >"$ipset_file"
    fi

    if [ "$new_timeout" -eq 0 ]; then
      sed -i "s/ timeout [0-9]\+//" "$ipset_file" && print_message "notice" "Для списка $set_name удалено время хранения записей"
    else
      if [ $old_timeout -eq 0 ]; then
        sed -i "s/maxelem 65536\$/maxelem 65536 timeout $new_timeout/" "$ipset_file" && print_message "notice" "Для списка $set_name установлено время хранения записей $new_timeout"
      else
        sed -i "s/ timeout [0-9]\+/ timeout $new_timeout/" "$ipset_file" && print_message "notice" "Для списка $set_name обновлено время хранения записей. Было $old_timeout, стало $new_timeout"
      fi
    fi

    if [ "$is_reloading" -eq 1 ]; then
      ipset destroy "$set_name"
      restore_ipset_from_file "$set_name" "$ipset_file"
      rm "$ipset_file"
    fi
  fi
}

reload_config() {
  if ! ascn_is_running; then
    print_message "error" "Antiscan не запущен"
    exit 1
  else
    if config_is_reloading; then
      print_message "error" "Процесс обновления конфигурации Antiscan уже запущен"
      exit 2
    elif geo_is_loading; then
      print_message "error" "Обновление конфигурации невозможно, пока идет загрузка списков подсетей геоблокировки"
      exit 2
    else
      create_lock_file

      ascn_old_timeout=$RECENT_CONNECTIONS_BANTIME
      ascn_candidates_old_timeout=$DIFFERENT_IP_CANDIDATES_STORAGETIME
      ascn_subnets_old_timeout=$SUBNETS_BANTIME
      custom_lists_block_mode_old="$CUSTOM_LISTS_BLOCK_MODE"
      use_custom_exclude_list_old=$USE_CUSTOM_EXCLUDE_LIST
      geoblock_mode_old="$GEOBLOCK_MODE"
      geo_countries_old="$GEOBLOCK_COUNTRIES"
      read_ndm_lockout_old="$READ_NDM_LOCKOUT_IPSETS"
      ndm_lockout_timeout_old="$LOCKOUT_IPSET_BANTIME"

      remove_rules
      destroy_temp_config
      read_config
      write_temp_config

      update_cron

      update_ipset_timeout "ascn_candidates" "$ascn_candidates_old_timeout" "$DIFFERENT_IP_CANDIDATES_STORAGETIME" "" 1
      update_ipset_timeout "ascn_ips" "$ascn_old_timeout" "$RECENT_CONNECTIONS_BANTIME" "" 1
      update_ipset_timeout "ascn_subnets" "$ascn_subnets_old_timeout" "$SUBNETS_BANTIME" "" 1

      reload_lockout_ipset "$read_ndm_lockout_old" "$READ_NDM_LOCKOUT_IPSETS" "$ndm_lockout_timeout_old" "$LOCKOUT_IPSET_BANTIME"
      reload_custom_ipset "$custom_lists_block_mode_old" "$CUSTOM_LISTS_BLOCK_MODE"
      reload_custom_exclude_ipset "$use_custom_exclude_list_old" "$USE_CUSTOM_EXCLUDE_LIST"
      reload_geo_ipset "$geoblock_mode_old" "$GEOBLOCK_MODE" "$geo_countries_old" "$GEOBLOCK_COUNTRIES"

      add_rules
      remove_lock_file
    fi
  fi
}

reload_custom_ipset() {
  old_custom_mode="$1"
  new_custom_mode="$2"
  if [ "$old_custom_mode" != "$new_custom_mode" ]; then
    if [ "$old_custom_mode" != "0" ]; then
      [ -n "$(ipset -q list ascn_custom_$old_custom_mode)" ] && ipset destroy ascn_custom_$old_custom_mode
    fi
    if [ "$new_custom_mode" == "blacklist" ] || [ "$new_custom_mode" == "whitelist" ]; then
      new_custom_ipset_name="ascn_custom_$new_custom_mode"
      load_custom_ipset "$new_custom_ipset_name"
    fi
  fi
}

reload_custom_exclude_ipset() {
  old_exclude_status="$1"
  new_exclude_status="$2"
  if [ "$old_exclude_status" != "$new_exclude_status" ]; then
    if [ "$old_exclude_status" != "0" ]; then
      [ -n "$(ipset -q list ascn_custom_exclude)" ] && ipset destroy ascn_custom_exclude
    fi
    if [ "$new_exclude_status" != "0" ]; then
      load_custom_ipset "ascn_custom_exclude"
    fi
  fi
}

reload_geo_ipset() {
  old_geo_mode="$1"
  new_geo_mode="$2"
  old_countries_list="$3"
  new_countries_list="$4"

  if [ "$old_geo_mode" != "$new_geo_mode" ] || [ "$old_countries_list" != "$new_countries_list" ]; then
    if [ "$old_geo_mode" != "0" ]; then
      [ -n "$(ipset -q list ascn_geo_$old_geo_mode)" ] && ipset destroy ascn_geo_$old_geo_mode
    fi
    if [ "$new_geo_mode" != "0" ] && [[ "$new_geo_mode" == "blacklist" || "$new_geo_mode" == "whitelist" ]]; then
      load_geo_ipset "$new_geo_mode" 0
    fi
  fi
}

reload_lockout_ipset() {
  old_lockout_state="$1"
  new_lockout_state="$2"
  old_lockout_timeout="$3"
  new_lockout_timeout="$4"
  if [ "$old_lockout_state" != "$new_lockout_state" ] || [ "$old_lockout_timeout" != "$new_lockout_timeout" ]; then
    if [ "$old_lockout_state" != "0" ]; then
      [ -n "$(ipset -q list ascn_ndm_lockout)" ] && ipset destroy ascn_ndm_lockout
    fi
    if [ "$new_lockout_state" != "0" ]; then
      add_ipset "ascn_ndm_lockout" "hash:ip" $LOCKOUT_IPSET_BANTIME
    fi
  fi
}

flush_ipsets() {
  case "$1" in
  "candidates" | "ips" | "subnets" | "custom_whitelist" | "custom_blacklist" | "custom_exclude" | "geo" | "ndm_lockout" | "")
    if ascn_is_running; then
      if config_is_reloading; then
        print_message "error" "Очистка списков недоступна во время обновления конфигурации Antiscan"
      elif geo_is_loading; then
        print_message "error" "Очистка списков недоступна во время загрузки подсетей геоблокировки"
      else
        ipset_to_clear="$1"
        question_text=""
        if [ -z "$ipset_to_clear" ]; then
          ipset_to_clear="candidates ips subnets custom_whitelist custom_blacklist custom_exclude geo_whitelist geo_blacklist ndm_lockout"
          question_text="Очистить все списки адресов? (Y/N): "
        else
          ipset_readable_name=""
          [ "$ipset_to_clear" == "candidates" ] && ipset_readable_name="список адресов-кандидатов на блокировку"
          [ "$ipset_to_clear" == "ips" ] && ipset_readable_name="список заблокированных IP"
          [ "$ipset_to_clear" == "subnets" ] && ipset_readable_name="список заблокированных подсетей"
          [ "$ipset_to_clear" == "custom_whitelist" ] && ipset_readable_name="пользовательский белый список адресов"
          [ "$ipset_to_clear" == "custom_blacklist" ] && ipset_readable_name="пользовательский черный список адресов"
          [ "$ipset_to_clear" == "custom_exclude" ] && ipset_readable_name="пользовательский список адресов-исключений"
          [ "$ipset_to_clear" == "geo" ] && ipset_to_clear="geo_whitelist geo_blacklist" && ipset_readable_name="список подсетей геоблокировки"
          [ "$ipset_to_clear" == "ndm_lockout" ] && ipset_readable_name="список заблокированных адресов NDMS"
          question_text="Очистить ${ipset_readable_name}? (Y/N): "
        fi
        if read -p "$question_text" confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
          for set in $ipset_to_clear; do
            name="ascn_$set"
            [ -n "$(ipset -q list $name)" ] && ipset flush $name
            case "$set" in
            "geo_whitelist" | "geo_blacklist")
              rm -f "$IPSETS_DIRECTORY/geo/"* && geo_cleared="1"
              ;;
            "custom_whitelist" | "custom_blacklist" | "custom_exclude")
              local custom_set_filename="$ANTISCAN_DIR/$name.txt"
              [ -f "$custom_set_filename" ] && echo >"$custom_set_filename"
              ;;
            *)
              set_filename="$IPSETS_DIRECTORY/ipset_$name.txt"
              [ -f "$set_filename" ] && rm "$set_filename"
              [ "$set" == "ndm_lockout" ] && lockout_cleared="1"
              ;;
            esac
          done
          if [ "$geo_cleared" == "1" ] && [[ "$GEOBLOCK_MODE" == "blacklist" || "$GEOBLOCK_MODE" == "whitelist" ]]; then
            msg_to_print="Перезапустите Antiscan, чтобы повторно включить геоблокировку."
            printf "${YELLOW_COLOR}${msg_to_print}${NO_STYLE}\n"
            print_message "warning" "${msg_to_print}"
          fi
          if [ "$lockout_cleared" == "1" ] && [ "$READ_NDM_LOCKOUT_IPSETS" == "1" ]; then
            local ndm_ipsets="$(ipset list -n | grep -E '^_NDM_BFD_.+4$')"
            for ndm_ipset in $ndm_ipsets; do
              ndm_ipset_data="$(ipset list $ndm_ipset | tail -n +8)"
              [ -n "$ndm_ipset_data" ] && ndmset_has_ips=1
            done
            if [ "$ndmset_has_ips" == "1" ]; then
              msg_to_print="Блокировка будет снята, когда система очистит собственные списки ограничения доступа."
              printf "${YELLOW_COLOR}${msg_to_print}${NO_STYLE}\n"
              print_message "warning" "${msg_to_print}"
            fi
          fi
        fi
      fi
    else
      print_message "error" "Antiscan не запущен"
    fi
    ;;
  *)
    echo "Использование: $0 flush [candidates|ips|subnets|custom_whitelist|custom_blacklist|custom_exclude|geo|ndm_lockout]"
    ;;
  esac
}

update_ipsets() {
  case "$1" in
  "custom" | "geo")
    if ascn_is_running; then
      if config_is_reloading; then
        print_message "error" "Обновление ipset недоступно во время обновления конфигурации Antiscan"
        exit 2
      else
        if [ "$1" == "custom" ]; then
          if [ "$CUSTOM_LISTS_BLOCK_MODE" == "blacklist" ] || [ "$CUSTOM_LISTS_BLOCK_MODE" == "whitelist" ]; then
            ipset_custom_name="ascn_custom_${CUSTOM_LISTS_BLOCK_MODE}"
            if [ -n "$(ipset -q list $ipset_custom_name)" ]; then
              ipset flush "$ipset_custom_name"
              load_custom_ipset "$ipset_custom_name"
            else
              print_message "error" "ipset $ipset_custom_name отсутствует в ядре."
              print_message "error" "Перезапустите Antiscan и повторите попытку обновления."
            fi
          fi
          if [ "$USE_CUSTOM_EXCLUDE_LIST" -eq 1 ]; then
            if [ -n "$(ipset -q list ascn_custom_exclude)" ]; then
              ipset flush ascn_custom_exclude
              load_custom_ipset "ascn_custom_exclude"
            else
              print_message "error" "ipset ascn_custom_exclude отсутствует в ядре."
              print_message "error" "Перезапустите Antiscan и повторите попытку обновления."
            fi
          fi
        else
          if [ "$GEOBLOCK_MODE" == "blacklist" ] || [ "$GEOBLOCK_MODE" == "whitelist" ]; then
            load_geo_ipset "$GEOBLOCK_MODE" 1
          fi
        fi
      fi
    else
      exit 1
    fi
    ;;
  *)
    echo "Использование: $0 update_ipsets {custom|geo}"
    ;;
  esac
}

update_cron() {
  crontab_bin="/opt/bin/crontab"
  if [ -f "$crontab_bin" ]; then
    ascn_cron_file="$ANTISCAN_DIR/ascn_crontab.conf"
    if [ -s "$ascn_cron_file" ]; then
      tasks_from_crontab="$(crontab -l | grep 'S99ascn')"
      tasks_from_file="$(grep 'S99ascn' $ascn_cron_file)"
      if [ "$tasks_from_crontab" != "$tasks_from_file" ]; then
        print_message "notice" "Обновляем crontab"
        crontab -l | sed '/S99ascn/d' >"/tmp/crontasks"
        echo "$tasks_from_file" >>"/tmp/crontasks"
        crontab "/tmp/crontasks"
        rm "/tmp/crontasks"
      fi
    else
      print_message "error" "Невозможно обновить crontab! Файл ascn_crontab.conf пуст."
    fi
  else
    print_message "error" "crontab не найден! У вас не установлен cron?"
  fi
}

retry_load_geo() {
  if ascn_is_running; then
    if config_is_reloading; then
      print_message "error" "Загрузка подсетей геоблокировки недоступна во время обновления конфигурации Antiscan"
      exit 2
    else
      if [ "$GEOBLOCK_MODE" == "blacklist" ] || [ "$GEOBLOCK_MODE" == "whitelist" ]; then
        if [ -f "$ASCN_GEO_LOAD_ERROR_FILE" ]; then
          load_geo_ipset "$GEOBLOCK_MODE" 0 1
        else
          remove_geo_error_task
        fi
      else
        remove_geo_error_task
      fi
    fi
  else
    exit 1
  fi
}

case "$1" in
start)
  start
  ;;
stop)
  stop
  ;;
restart)
  export_ipsets
  stop
  start
  ;;
status)
  get_status
  ;;
status_nc)
  get_status | awk '{ gsub(/\033\[[0-9;]*m/, ""); print }'
  ;;
list)
  show_ipsets $2
  ;;
reload)
  reload_config
  ;;
flush)
  flush_ipsets $2
  ;;
update_rules)
  update_iptables
  ;;
read_candidates | read)
  read_ip_candidates
  ;;
read_ndm_ipsets | read_ndm)
  read_ndm_ipsets
  ;;
save_ipsets | save)
  export_ipsets
  ;;
update_ipsets)
  update_ipsets $2
  ;;
update_crontab)
  update_cron
  ;;
retry_load_geo)
  retry_load_geo
  ;;
*)
  echo "Использование: $0 {start|stop|restart|status|list|reload|flush|update_rules|read_candidates|read_ndm_ipsets|save_ipsets|update_ipsets|update_crontab}"
  ;;
esac
