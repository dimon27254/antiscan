#!/bin/sh

RED_COLOR="\033[1;31m"
GREEN_COLOR="\033[1;32m"
YELLOW_COLOR="\033[1;33m"
BOLD_TEXT="\033[1m"
NO_STYLE="\033[0m"
CONFIG_FILE="/opt/etc/ascn.conf"
CONFIG_FILE_TEMP="/tmp/ascn.conf.tmp"
ASCN_TEMP_FILE="/tmp/ascn.run"
ASCN_LOCK_FILE="/tmp/ascn.lock"

IPTABLES_RULE_1=""
IPTABLES_RULE_2=""
IPTABLES_RULE_3=""
IPTABLES_RULE_4=""
IPTABLES_RULE_5=""
IPTABLES_RULE_6=""

read_config() {
  source "$CONFIG_FILE"
  check_config
  if [ -f "$CONFIG_FILE_TEMP" ]; then
    source "$CONFIG_FILE_TEMP"
  fi
}

check_config() {
  if [ -z "$RULES_MASK" ]; then
    RULES_MASK="255.255.255.255"
  fi

  if [ -z "$SAVE_IPSETS" ]; then
    SAVE_IPSETS=0
  else
    if [ "$SAVE_IPSETS" -eq 1 ] && [ -z "$IPSETS_SAVE_PATH" ]; then
      echo "В ascn.conf не указан путь для сохранения ipset!" >&2
      exit 3
    fi
  fi
}

read_config

start() {
  if ascn_is_running; then
    echo "Antiscan уже работает" >&2
    exit 1
  else

    if config_is_reloading; then
      echo "Запуск Antiscan невозможен, пока идёт обновление конфигурации" >&2
      exit 2
    fi

    load_kernel_modules
    write_temp_config
    create_ipsets
    add_rules
    create_status_file
    echo "Antiscan запущен"
  fi
}

stop() {
  if ! ascn_is_running; then
    echo "Antiscan не запущен" >&2
  else

    if config_is_reloading; then
      echo "Остановка Antiscan невозможна, пока идёт обновление конфигурации" >&2
      exit 2
    fi

    remove_rules
    destroy_ipsets
    destroy_temp_config
    remove_status_file
    echo "Antiscan остановлен"
  fi
}

load_kernel_modules() {
  if [ -z "$(lsmod 2>/dev/null | grep "xt_recent ")" ]; then
    xtrecent_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_recent.ko*")
    if [ -n "$xtrecent_mod_path" ]; then
      insmod "$xtrecent_mod_path" >/dev/null 2>&1
      echo "xt_recent.ko загружен"
    else
      echo "Не удалось найти модуль ядра xt_recent.ko" >&2
      exit 1
    fi
  fi

  if [ -z "$(lsmod 2>/dev/null | grep "xt_multiport ")" ]; then
    multiport_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_multiport.ko*")
    if [ -n "$multiport_mod_path" ]; then
      insmod "$multiport_mod_path" >/dev/null 2>&1
      echo "xt_multiport.ko загружен"
    else
      echo "Не удалось найти модуль ядра xt_multiport.ko" >&2
      exit 1
    fi
  fi
}

write_temp_config() {
  echo "ISP_INTERFACES=\"$ISP_INTERFACES\"" >"$CONFIG_FILE_TEMP"
  echo "PORTS=\"$PORTS\"" >>"$CONFIG_FILE_TEMP"
  echo "RECENT_CONNECTIONS_TIME=$RECENT_CONNECTIONS_TIME" >>"$CONFIG_FILE_TEMP"
  echo "RECENT_CONNECTIONS_HITCOUNT=$RECENT_CONNECTIONS_HITCOUNT" >>"$CONFIG_FILE_TEMP"
  echo "RECENT_CONNECTIONS_LIMIT=$RECENT_CONNECTIONS_LIMIT" >>"$CONFIG_FILE_TEMP"
  echo "RECENT_CONNECTIONS_BANTIME=$RECENT_CONNECTIONS_BANTIME" >>"$CONFIG_FILE_TEMP"
  echo "DIFFERENT_IP_CANDIDATES_STORAGETIME=$DIFFERENT_IP_CANDIDATES_STORAGETIME" >>"$CONFIG_FILE_TEMP"
  echo "DIFFERENT_IP_THRESHOLD=$DIFFERENT_IP_THRESHOLD" >>"$CONFIG_FILE_TEMP"
  echo "SUBNETS_BANTIME=$SUBNETS_BANTIME" >>"$CONFIG_FILE_TEMP"
  echo "RULES_MASK=\"$RULES_MASK\"" >>"$CONFIG_FILE_TEMP"
  echo "SAVE_IPSETS=$SAVE_IPSETS" >>"$CONFIG_FILE_TEMP"
  echo "IPSETS_SAVE_PATH=\"$IPSETS_SAVE_PATH\"" >>"$CONFIG_FILE_TEMP"
}

destroy_temp_config() {
  SAVE_IPSETS=0
  IPSETS_SAVE_PATH=""
  RULES_MASK="255.255.255.255"
  rm -f "$CONFIG_FILE_TEMP"
  source "$CONFIG_FILE"
}

_iptables() {
  ACTION=$1
  shift 1
  RULE="$@"

  iptables -C $RULE 2>/dev/null
  exists=$?

  if [ "$ACTION" == "-I" ]; then
    if [ $exists -ne 0 ]; then
      iptables $ACTION $RULE
    fi
  elif [ "$ACTION" == "-D" ] && [ $exists -eq 0 ]; then
    iptables $ACTION $RULE
  fi
}

update_rules_variables() {
  IPTABLES_RULE_1="-p tcp -m multiport --dports $PORTS -m conntrack --ctstate NEW -m recent --set --name scanners --mask $RULES_MASK"
  IPTABLES_RULE_2="-p tcp -m multiport --dports $PORTS -m conntrack --ctstate NEW -m recent --update --seconds $RECENT_CONNECTIONS_TIME --hitcount $RECENT_CONNECTIONS_HITCOUNT --name scanners --mask $RULES_MASK -j SET --add-set ascn_ips src"
  IPTABLES_RULE_3="-p tcp -m multiport --dports $PORTS -m connlimit --connlimit-above $RECENT_CONNECTIONS_LIMIT --connlimit-mask $RULES_MASK -j SET --add-set ascn_ips src"
  IPTABLES_RULE_4="-p tcp -m multiport --dports $PORTS -m set --match-set ascn_ips src -j DROP"
  IPTABLES_RULE_5="-p tcp -m multiport --dports $PORTS -j SET --add-set ascn_candidates src"
  IPTABLES_RULE_6="-p tcp -m multiport --dports $PORTS -m set --match-set ascn_subnets src -j DROP"
}

add_rules() {
  update_rules_variables
  for CHAIN in "INPUT" "FORWARD"; do
    for INTERFACE in $ISP_INTERFACES; do
      _iptables -I $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_1
      _iptables -I $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_2
      _iptables -I $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_3
      _iptables -I $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_4
      _iptables -I $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_5
      _iptables -I $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_6
    done
  done
}

remove_rules() {
  update_rules_variables
  for CHAIN in "INPUT" "FORWARD"; do
    for INTERFACE in $ISP_INTERFACES; do
      _iptables -D $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_1
      _iptables -D $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_2
      _iptables -D $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_3
      _iptables -D $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_4
      _iptables -D $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_5
      _iptables -D $CHAIN -w -t filter -i $INTERFACE $IPTABLES_RULE_6
    done
  done
}

create_ipsets() {
  if [ -z "$(ipset --quiet list ascn_candidates)" ]; then
    add_ipset "ascn_candidates" "hash:ip" $DIFFERENT_IP_CANDIDATES_STORAGETIME
  fi

  if [ -z "$(ipset --quiet list ascn_ips)" ]; then
    add_ipset "ascn_ips" "hash:ip" $RECENT_CONNECTIONS_BANTIME
  fi

  if [ -z "$(ipset --quiet list ascn_subnets)" ]; then
    add_ipset "ascn_subnets" "hash:net" $SUBNETS_BANTIME
  fi
}

add_ipset() {
  ipset_name="$1"
  ipset_type="$2"
  ipset_timeout="$3"
  ipset_timeout_string=""
  ipset_file="$IPSETS_SAVE_PATH/ipset_$ipset_name.txt"
  should_add_ipset=1

  case $ipset_name in
  "ascn_candidates")
    ipset_timeout_string=$([ "$DIFFERENT_IP_CANDIDATES_STORAGETIME" -ne 0 ] && echo "timeout "$DIFFERENT_IP_CANDIDATES_STORAGETIME"")
    ;;
  "ascn_ips")
    ipset_timeout_string=$([ "$RECENT_CONNECTIONS_BANTIME" -ne 0 ] && echo "timeout "$RECENT_CONNECTIONS_BANTIME"")
    ;;
  "ascn_subnets")
    ipset_timeout_string=$([ "$SUBNETS_BANTIME" -ne 0 ] && echo "timeout "$SUBNETS_BANTIME"")
    ;;
  esac

  if [ "$SAVE_IPSETS" -eq 1 ] && [ -s "$ipset_file" ]; then
    ipset_old_timeout=$(grep -oP '^create.*timeout\s+\K\d+$' "$ipset_file")
    if [ -z "$ipset_old_timeout" ]; then
      ipset_old_timeout=0
    fi
    update_ipset_timeout "$ipset_name" "$ipset_old_timeout" "$ipset_timeout" "$ipset_file" 0
    if restore_ipset_from_file "$ipset_name" "$ipset_file"; then
      should_add_ipset=0
    fi
  fi

  if [ "$should_add_ipset" -eq 1 ]; then
    ipset create $ipset_name $ipset_type $ipset_timeout_string
  fi
}

destroy_ipsets() {
  if [ -n "$(ipset --quiet list ascn_candidates)" ]; then
    ipset destroy ascn_candidates
  fi

  if [ -n "$(ipset --quiet list ascn_ips)" ]; then
    ipset destroy ascn_ips
  fi

  if [ -n "$(ipset --quiet list ascn_subnets)" ]; then
    ipset destroy ascn_subnets
  fi
}

restore_ipset_from_file() {
  if ! ipset restore <"$2"; then
    echo "Не удалось импортировать ipset $1!" >&2
    return 1
  else
    return 0
  fi
}

read_ip_candidates() {
  ASCN_REGEXP_FILE="/tmp/ascn.regexp"
  if ascn_is_running; then
    if config_is_reloading; then
      echo "Работа с адресами-кандидатами невозможна, пока идёт обновление конфигурации Antiscan" >&2
      exit 2
    else
      if [ -n "$(ipset --quiet list ascn_ips)" ] && [ -n "$(ipset --quiet list ascn_candidates)" ] && [ -n "$(ipset --quiet list ascn_subnets)" ]; then
        ipset_members_sorted="$(ipset list ascn_candidates | tail -n +8 | sort)"
        if [ -f "$ASCN_REGEXP_FILE" ]; then rm "$ASCN_REGEXP_FILE"; fi
        echo "$ipset_members_sorted" | grep -oE '^([0-9]{1,3}[\.]){3}' | uniq -c | while read count subnet_number; do
          if [ "$count" -ge "$DIFFERENT_IP_THRESHOLD" ]; then
            echo -n "${subnet_number}[0-9]{1,3}|" >>"$ASCN_REGEXP_FILE"
            ipset add ascn_subnets "${subnet_number}0/24" 2>/dev/null
          fi
        done
        if [ -s "$ASCN_REGEXP_FILE" ]; then
          ips_regexp="$(cat $ASCN_REGEXP_FILE | sed 's/.$//')"
          ipset flush ascn_candidates
          echo "$ipset_members_sorted" | grep -vE "^(${ips_regexp})" | xargs -L1 ipset -exist add ascn_candidates
          rm "$ASCN_REGEXP_FILE"
        fi
      fi
    fi
  else
    exit 1
  fi
}

create_status_file() {
  echo "1" >"$ASCN_TEMP_FILE"
}

remove_status_file() {
  if ascn_is_running; then
    rm "$ASCN_TEMP_FILE"
  fi
}

create_lock_file() {
  echo "1" >"$ASCN_LOCK_FILE"
}

remove_lock_file() {
  if config_is_reloading; then
    rm "$ASCN_LOCK_FILE"
  fi
}

ascn_is_running() {
  if [ -f "$ASCN_TEMP_FILE" ]; then
    return 0
  else
    return 1
  fi
}

config_is_reloading() {
  if [ -f "$ASCN_LOCK_FILE" ]; then
    return 0
  else
    return 1
  fi
}

get_status() {
  echo -n "Статус Antiscan: "
  if ascn_is_running; then
    if config_is_reloading; then
      printf "${YELLOW_COLOR}обновление конфигурации${NO_STYLE}\n"
    else
      banned_ip_count="$(ipset list ascn_ips | tail -n +8 | grep -c '^')"
      banned_subnets_count="$(ipset list ascn_subnets | tail -n +8 | grep -c '^')"
      printf "${GREEN_COLOR}работает${NO_STYLE}\n"
      printf "Заблокировано IP: ${BOLD_TEXT}$banned_ip_count${NO_STYLE}\n"
      printf "Заблокировано подсетей: ${BOLD_TEXT}$banned_subnets_count${NO_STYLE}\n"
    fi
  else
    printf "${RED_COLOR}не запущен${NO_STYLE}\n"
  fi
}

show_ipsets() {
  case "$1" in
  ips | subnets)
    if ascn_is_running; then
      if config_is_reloading; then
        echo "Просмотр данных недоступен во время обновления конфигурации Antiscan" >&2
      else
        ASCN_IPSET_TEMP_FILE="/tmp/ascn_ipset.tmp"
        text="IP"
        text_1="IP"
        if [ "$1" == "subnets" ]; then
          text="подсети"
          text_1="подсетей"
        fi
        ipset list ascn_$1 -s | tail -n +8 >$ASCN_IPSET_TEMP_FILE
        banned_count="$(grep -c '^' $ASCN_IPSET_TEMP_FILE)"
        if [ "$banned_count" -eq 0 ]; then
          echo "Заблокированные ${text} отсутствуют"
        else
          echo "Заблокированные ${text}:"
          cat $ASCN_IPSET_TEMP_FILE
          printf "Заблокировано ${text_1}: ${BOLD_TEXT}${banned_count}${NO_STYLE}\n"
        fi
        rm $ASCN_IPSET_TEMP_FILE
      fi
    else
      echo "Antiscan не запущен" >&2
    fi
    ;;
  *)
    echo "Использование: $0 list {ips|subnets}"
    ;;
  esac
}

update_iptables() {
  if ! ascn_is_running; then
    exit 1
  else
    wait_timeout=15
    while config_is_reloading && [ "$wait_timeout" -gt 0 ]; do
      if [ $wait_timeout -eq 15 ]; then echo -n "Идет обновление конфигурации Antiscan, пробуем восстановить правила за 15 секунд... " >&2; fi
      wait_timeout=$((wait_timeout - 1))
      sleep 1
    done
    if config_is_reloading; then
      echo "неудачно" >&2
      exit 2
    else
      if [ $wait_timeout -ne 15 ]; then echo "успешно" >&2; fi
      add_rules
    fi
  fi
}

export_ipsets() {
  if [ "$SAVE_IPSETS" -eq 1 ]; then
    if ascn_is_running; then
      if config_is_reloading; then
        echo "Экспорт ipset в файл недоступен во время обновления конфигурации Antiscan" >&2
        exit 2
      else
        for set_name in "ascn_candidates" "ascn_ips" "ascn_subnets"; do
          ipset_filename="$IPSETS_SAVE_PATH/ipset_$set_name.txt"
          banned_count="$(ipset list $set_name | tail -n +8 | grep -c '^')"
          if [ "$banned_count" -ne 0 ]; then
            if ! ipset save "$set_name" >"$ipset_filename"; then
              echo "Не удалось экспортировать ipset $set_name!" >&2
              exit 3
            fi
          else
            if [ -f "$ipset_filename" ]; then
              rm "$ipset_filename"
            fi
          fi
        done
      fi
    else
      exit 1
    fi
  fi
}

update_ipset_timeout() {
  set_name="$1"
  old_timeout="$2"
  new_timeout="$3"
  ipset_file="$4"
  is_reloading="$5"

  if [ "$old_timeout" -ne "$new_timeout" ]; then

    if [ "$is_reloading" -eq 1 ]; then
      ipset_file="/tmp/${set_name}.txt"
      ipset save "$set_name" >"$ipset_file"
    fi

    if [ "$new_timeout" -eq 0 ]; then
      sed -i "s/ timeout [0-9]\+//" "$ipset_file" && echo "Для списка $set_name удалено время хранения записей"
    else
      if [ $old_timeout -eq 0 ]; then
        sed -i "s/maxelem 65536\$/maxelem 65536 timeout $new_timeout/" "$ipset_file" && echo "Для списка $set_name установлено время хранения записей $new_timeout"
      else
        sed -i "s/ timeout [0-9]\+/ timeout $new_timeout/" "$ipset_file" && echo "Для списка $set_name обновлено время хранения записей. Было $old_timeout, стало $new_timeout"
      fi
    fi

    if [ "$is_reloading" -eq 1 ]; then
      ipset destroy "$set_name"
      restore_ipset_from_file "$set_name" "$ipset_file"
      rm "$ipset_file"
    fi
  fi
}

reload_config() {
  if ! ascn_is_running; then
    echo "Antiscan не запущен" >&2
    exit 1
  else
    if config_is_reloading; then
      echo "Процесс обновления конфигурации Antiscan уже запущен" >&2
      exit 2
    else
      create_lock_file
      ascn_old_timeout=$RECENT_CONNECTIONS_BANTIME
      ascn_candidates_old_timeout=$DIFFERENT_IP_CANDIDATES_STORAGETIME
      ascn_subnets_old_timeout=$SUBNETS_BANTIME
      remove_rules
      destroy_temp_config
      read_config
      write_temp_config
      update_ipset_timeout "ascn_candidates" "$ascn_candidates_old_timeout" "$DIFFERENT_IP_CANDIDATES_STORAGETIME" "" 1
      update_ipset_timeout "ascn_ips" "$ascn_old_timeout" "$RECENT_CONNECTIONS_BANTIME" "" 1
      update_ipset_timeout "ascn_subnets" "$ascn_subnets_old_timeout" "$SUBNETS_BANTIME" "" 1
      add_rules
      remove_lock_file
    fi
  fi
}

flush_ipsets() {
  case "$1" in
  "candidates" | "ips" | "subnets" | "")
    if ascn_is_running; then
      if config_is_reloading; then
        echo "Очистка списков недоступна во время обновления конфигурации Antiscan" >&2
      else
        ipset_to_clear="$1"
        question_text=""
        if [ -z "$ipset_to_clear" ]; then
          ipset_to_clear="candidates ips subnets"
          question_text="Очистить все списки адресов? (Y/N): "
        else
          ipset_readable_name=""
          [ "$ipset_to_clear" == "candidates" ] && ipset_readable_name="адресов-кандидатов на блокировку"
          [ "$ipset_to_clear" == "ips" ] && ipset_readable_name="заблокированных IP"
          [ "$ipset_to_clear" == "subnets" ] && ipset_readable_name="заблокированных подсетей"
          question_text="Очистить список ${ipset_readable_name}? (Y/N): "
        fi
        if read -p "$question_text" confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
          for set in $ipset_to_clear; do
            name="ascn_$set"
            set_filename="$IPSETS_SAVE_PATH/ipset_$name.txt"
            ipset flush $name && [ -f "$set_filename" ] && rm "$set_filename"
          done
        fi
      fi
    else
      echo "Antiscan не запущен" >&2
    fi
    ;;
  *)
    echo "Использование: $0 flush [candidates|ips|subnets]"
    ;;
  esac
}

case "$1" in
start)
  start
  ;;
stop)
  stop
  ;;
restart)
  stop
  start
  ;;
status)
  get_status
  ;;
list)
  show_ipsets $2
  ;;
reload)
  reload_config
  ;;
flush)
  flush_ipsets $2
  ;;
update_rules)
  update_iptables
  ;;
read_candidates)
  read_ip_candidates
  ;;
save_ipsets)
  export_ipsets
  ;;
*)
  echo "Использование: $0 {start|stop|restart|status|list|reload|flush|update_rules|read_candidates|save_ipsets}"
  ;;
esac
